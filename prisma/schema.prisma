generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String              @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole            @default(USER)
  accounts          Account[]
  sessions          Session[]
  canvaSessionState CanvaSessionState[]
  CanvaUserToken    CanvaUserToken[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model CanvaSessionState {
  sessionId    String   @id
  codeVerifier String
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CanvaUserToken {
  id           String @id @default(cuid())
  userId       String
  accessToken  String
  refreshToken String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CanvaJobStatus {
  IN_PROGRESS
  SUCCESS
  FAILED
}

model CanvaExportJob {
  exportId String         @id
  designId String
  status   CanvaJobStatus
  urls     String[]
}

model ExcalidrawDiagrams {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  lastModified DateTime
}